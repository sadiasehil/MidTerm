Please answer the below Data Structure Questions:

why do we need data structure?
A.-Because Data structure is a particular way of organizing and storing data in a computer so that it can be accessed and modified efficiently.
In order to locate and retrieve  data it is required to have data in a structured form which  makes  retrieval and manipulation easy.
What are the various operations that can be performed on different Data Structures?
     1. Searching
     2. Sorting
     3. Insertion
     4. Deletion
     5. Merging
     6. Traversing
List out the areas in which data structures are applied extensively?
     1. Operating System,
     2. Database Management System,
     3. Statistical analysis package,
     4. Numerical Analysis,
     5. Graphics,
     6. Artificial Intelligence,
     7. Simulation
what is an Array?
- An array is a data structure that contains a group of elements. Typically these elements are all of the same data type.
what is the difference between the Array and ArrayList?
- the array cannot grow automatically ,arrayList can grow automatically .
what is LinkedList?
-A linked list is a linear data structure, in which the elements are not stored at contiguous memory locations. The elements in a linked list are linked using pointers
- linked list consists of nodes where each node contains a data field and a reference(link) to the next node in the list
How is an Array different from Linked List?
        1. An array element is having index number, but a node is having reference to next node.
        2. In array each element is independent, does not have any connection to the other element
         on the other hand in linked list each node are connected by previous node.
        3. In Linked list, location or address of elements is stored in the link part of previous
         element/node. In array, no pointers are used like linked list so no need of extra space
         in memory for pointer.
        4. Linked list consumed extra memory as the link location need to be saved in in the linked
        part of the previous elements in case of array it is not required.
what is queue?
-is first in first (FIFO) out data structure
what is stack?
-is first in last out(FILO ) data structure
what is FIFO and LIFO?
-FIFO :is first in first
-FILO :is first in last out
what is the order of complexity?
what is the best case to search an element from an array?
what is the worst case to search an element from an array?
what is tree in data structure?
-A tree is a nonlinear data structure,It is a hierarchical tree structure, which has root value and subtrees pf children with parent node, represented as a set of linked notes
what is graph in data structure?
-A Graph is a non-linear data structure consisting of nodes and edges.
-A Graph consists of a finite set of vertices(or nodes) and set of Edges which connect a pair of nodes.
what is the difference between the HashTable and HashMap?
-HashMap and Hashtable both are used to store data in key and value form. Both are using hashing technique to store unique keys.BUT
-HashMap is non synchronized. It is not-thread safe and can't be shared between many threads without proper synchronization code.
-Hashtable is synchronized. It is thread-safe and can be shared with many threads.
-Hashtable doesn't allow any null key or value. HashMap allows one null key and multiple null values.
- HashMap is fast.	Hashtable is slow.
-HashMap is traversed by Iterator.	Hashtable is traversed by Enumerator and Iterator.
What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model.
1. RDBMS - Array
2. Network data model - Graph
3. Hierarchical data model - Trees
How HashMap works in java?
A HashMap element has key and value in Java, elements are stored against a key.
What is ArrayIndexOutOfBoundsException in java? When it occurs?
-It is a class in Java API, which extends IndexOutOfBoundException. IndexOutOfBoundsException occur when an array has been accessed with an illegal index. Index either negative or greater than or equal to the size of the array.
What are the different ways of copying an array into another array?
1. Manually: Copy elements one by one.
2. Arrays.copyOf(): We can directly copy one array to another by using
Arrays.copyOf() method.
3. System.arraycopy(): Using this method.
4. Object.clone(): We can also use clone() method to make a copy of array.
What is difference between an array and a linked list?
        1. An array element is having index number, but a node is having reference to next node.
        2. In array each element is independent, does not have any connection to the other element
         on the other hand in linked list each node are connected by previous node.
        3. In Linked list, location or address of elements is stored in the link part of previous
         element/node. In array, no pointers are used like linked list so no need of extra space
         in memory for pointer.
        4. Linked list consumed extra memory as the link location need to be saved in in the linked
        part of the previous elements in case of array it is not required.
What is DFS and BFS?
-The breadth first search (BFS) and the depth first search (DFS) are the two algorithms used for traversing and searching a node in a graph. They can also be used to find out whether a node is reachable from a given node or not.
What is Recursion?
-Recursion is a tool a programmer can use to invoke a function call on itself.
What are linear and non linear data Structures?
-linear: array ,arayList,LinkedList,Stack,Queue,HashMap,HashTable
-non linear : Tree ,Graph
What is Big-(O)-notation?
-Big O notation is used in Computer Science to describe the performance or complexity of an algorithm. Big O specifically describes the worst-case scenario, and can be used to describe the execution time required or the space used (e.g. in memory or on disk) by an algorithm.
Outlined different kind of sorting algorithm with time complexity?
-Selection sort: It is an in-place comparison sort.Selection sort is noted for its simplicity,
 and also has performance advantages over more complicated algorithms in certain situations.
 Worst case performance: O(n2)
 Best case performance: O(n2)
 Average case performance: O(n2)
 Worst case space complexity: O(n) total, O(1) auxiliary
-Insertion sort: It is a comparison sort in which the sorted array (or list) is built one entry at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort,
heapsort, or merge sort.
Worst case performance: O(n2)
Best case performance: O(n)
Average case performance: O(n2)
Worst case space complexity: O(n) total, O(1) auxiliary
-Bubble sort: It is a comparison algorithm. It works by repeatedly stepping
 through the list to be sorted, comparing each pair of adjacent items and swapping them
 if they are in the wrong order. The pass through the list is repeated until no swaps are
 needed, which indicates that the list is sorted.
 Worst case performance: O(n2)
 Best case performance: O(n)
 Average case performance: O(n2)
 Worst case space complexity: O(n) total, O(1) auxiliary
 Bubble sort is not a practical sorting algorithm when n is large.
-Merge sort: It is an O(n log n) comparison-based sorting algorithm.
 Worst case performance: O(n log n)
 Best case performance: O(n log n) typical
 Average case performance: O(n log n)
 Worst case space complexity: O(n) total, O(n) auxiliary

-Quick sort: It is similar to merge sort in many ways. It divides the elements to be sorted into
 two groups, sorts the two groups by recursive calls, and combines the two sorted groups into
 a single array of sorted values.
 The choice of a good pivot element is critical to the efficiency of the quicksort algorithm.
 If we can ensure that the pivot element is near the median of the array values, then quicksort is very efficient.
 on average, makes O(n log n) comparisons to sort n items, in the worst case, it makes O(n2) comparisons
Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a)In terms of Accessing element.
  b)In terms of Inserting element.
  c)In terms of Searching element.
  d)In terms of Removing element.
-     Common Data Structure Operations
 Data Structure	    Time Complexity
                     Average	                                        Worst
                     Access	    Search	    Insertion	Deletion	Access	    Search	    Insertion	Deletion
 Array	            Θ(1)	    Θ(n)	    Θ(n)	    Θ(n)	    O(1)	    O(n)	    O(n)	    		O(n)
 Stack	            Θ(n)	    Θ(n)	    Θ(1)	    Θ(1)	    O(n)	    O(n)	    O(1)	    		O(1)
 Queue	            Θ(n)	    Θ(n)	    Θ(1)	    Θ(1)	    O(n)	    O(n)	    O(1)	    		O(1)
 Singly-Linked List	Θ(n)	    Θ(n)	    Θ(1)	    Θ(1)	    O(n)	    O(n)	    O(1)	    		O(1)
 Doubly-Linked List	Θ(n)	    Θ(n)	    Θ(1)	    Θ(1)	    O(n)	    O(n)	    O(1)	    		O(1)
 Skip List	        Θ(log(n))	Θ(log(n))	Θ(log(n))	Θ(log(n))	O(n)	    O(n)	    O(n)	    		O(n)
 Hash Table	        N/A	        Θ(1)	    Θ(1)	    Θ(1)	    N/A	        O(n)	    O(n)	    		O(n)
 BinarySearch Tree   Θ(log(n))	Θ(log(n))	Θ(log(n))	Θ(log(n))	O(n)	    O(n)	    O(n)	    		O(n)
 Cartesian Tree	    N/A	        Θ(log(n))	Θ(log(n))	Θ(log(n))	N/A	        O(n)	    O(n)	    		O(n)
 B-Tree	            Θ(log(n))	Θ(log(n))	Θ(log(n))	Θ(log(n))	O(log(n))	O(log(n))	O(log(n))			O(log(n))
 Red-Black Tree	    Θ(log(n))	Θ(log(n))	Θ(log(n))	Θ(log(n))	O(log(n))	O(log(n))	O(log(n))			O(log(n))
 Splay Tree	        N/A	        Θ(log(n))	Θ(log(n))	Θ(log(n))	N/A	        O(log(n))	O(log(n))			O(log(n))
 AVL Tree	        Θ(log(n))	Θ(log(n))	Θ(log(n))	Θ(log(n))	O(log(n))	O(log(n))	O(log(n))			O(log(n))
 KD Tree 	        Θ(log(n))	Θ(log(n))	Θ(log(n))	Θ(log(n))	O(n)	    O(n)	    O(n)	    		O(n)



